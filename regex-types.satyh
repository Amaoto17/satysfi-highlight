@import: vector


type quantity =
  | Greedy
  | Reluctant
  | Possessive

type anchor =
  | BeginningOfLine
  | EndOfLine
  | WordBoundary
  | NonWordBoundary

type repeat =
  | Just of int
  | AtLeast of int
  | AtMost of int
  | Between of int * int


type node =
  | Char of string
  | Any
  | Concat of node list
  | Alt of node * node
  | Opt of quantity * node
  | Many of quantity * node
  | Many1 of quantity * node
  | Group of node
  | Satisfy of string -> bool
  | LookAhead of node
  | NegLookAhead of node
  | LookBehind of int * node
  | NegLookBehind of int * node
  | Anchor of anchor
  | BackRef of int
  | Repeat of repeat * quantity * node
  | Atomic of node


type inst =
  | OpEmpty
  | OpChar of string
  | OpMatch
  | OpAny
  | OpSplit of int * int
  | OpJump of int
  | OpAtomicExec of int * int
  | OpStop
  | OpSaveStart
  | OpSaveEnd of int
  | OpSatisfy of string -> bool
  | OpLookAhead of int * int
  | OpNegLookAhead of int * int
  | OpLookBehind of int * int * int
  | OpNegLookBehind of int * int * int
  | OpAnchor of anchor
  | OpBackRef of int


type match-data = (int * int * string) option % begin, end, matched string

type regex-vm = (|
  inst-seq : inst Vec.t;
  pc : int;
  pos-stack : int list;
  matched : match-data list;
|)

let regex-vm-init = (|
  inst-seq = Vec.empty;
  pc = 0;
  pos-stack = [];
  matched = [];
|)
