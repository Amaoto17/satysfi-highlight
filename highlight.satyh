@require: vdecoset
@require: deco
@require: pervasives
@import: color-scheme
@import: language

open Language


module Highlight : sig

  direct +code : [rule?; string] block-cmd

end = struct

  % let syntax-highlight ctx rule code =
  %   Language.scan ctx rule code


  let decoset-code = VDecoSet.empty

  let set-code-font ctx =
    ctx |> set-font Latin (`lmmono`, 1., 0.)
        |> set-hyphen-penalty 100000

  let scheme decoset txtcolor ctx ruleopt code =
    let pads-code = (0pt, 0pt, 8pt, 8pt) in
    block-frame-breakable ctx pads-code decoset (fun ctx -> (
      let fontsize = get-font-size ctx in
      let ctx =
        ctx |> set-code-font
            |> set-text-color txtcolor
      in
      let charwid = get-natural-width (read-inline ctx {0}) in
      let ctx-code =
        ctx |> set-space-ratio (charwid /' fontsize) 0. 0.
      in
      let lstraw = split-into-lines code in
      let lst =
        match lstraw with
        | []        -> lstraw
        | x :: []   -> lstraw
        | _ :: tail -> tail
      in
      let pads-line = (0pt, 0pt, 0pt, 0pt) in
      let ctx-line =
        ctx |> set-font-size 6pt
            |> set-manual-rising 1.5pt
      in
      let (ib-code, _, _) =
        lst |> List.fold-left-adjacent (fun (ibacc, line, stack) (i, s) _ optnext -> (
          let ib-last =
            match optnext with
            | Some _ -> inline-fil ++ mandatory-break ctx-code
            | None   -> inline-fil
          in
          let ib-line =
            let content =
              inline-fil
                ++ read-inline ctx-line (embed-string (arabic line))
                ++ inline-skip (charwid *' 3.)
            in
            inline-frame-fixed (charwid *' 6.) pads-line Deco.empty content
          in
          let (content, new-stack) =
            match ruleopt with
            | None ->
                (read-inline ctx-code (embed-string s), [])
            | Some rule ->
                Language.highlight ctx-code stack rule s
          in
          let ib =
            ib-line
              ++ inline-skip (charwid *' (float i))
              ++ content
              ++ ib-last
          in
          (ibacc ++ ib, line + 1, new-stack)
        )) (inline-nil, 1, [])
      in
      line-break true true ctx ib-code
    ))
    

  % let scheme decoset txtcolor ctx ruleopt code =
  %   let pads = (0pt, 0pt, 8pt, 8pt) in
  %   block-frame-breakable ctx pads decoset (fun ctx -> (
  %     let fontsize = get-font-size ctx in
  %     let ctx = ctx |> set-code-font in
  %     let charwid = get-natural-width (read-inline ctx {0}) in
  %     let ctx-code =
  %       ctx |> set-space-ratio (charwid /' fontsize) 0. 0.
  %           |> set-text-color txtcolor
  %     in
  %     let lstraw = split-into-lines code in
  %     let lst =
  %       match lstraw with
  %       | []        -> lstraw
  %       | x :: []   -> lstraw
  %       | _ :: tail -> tail
  %     in
  %     let ib-code =
  %       let-mutable line <- 1 in
  %       lst |> List.fold-left-adjacent (fun ibacc (i, s) _ optnext -> (
  %         let ib-last =
  %           match optnext with
  %           | Some _ -> inline-fil ++ discretionary 0 (inline-skip ((get-text-width ctx) *' 2.)) inline-nil inline-nil
  %           | None   -> inline-fil
  %         in
  %         let content =
  %           match ruleopt with
  %           | None -> read-inline ctx-code (embed-string s)
  %           | Some rule -> syntax-highlight ctx-code rule s
  %         in
  %         let ib =
  %           inline-skip (charwid *' (float i))
  %             ++ content
  %             ++ ib-last
  %         in
  %         let ib-line =
  %           let pads = (0pt, 0pt, 0pt, 0pt) in
  %           let ctx-line =
  %             ctx |> set-font-size 6pt
  %                 |> set-manual-rising 1.5pt
  %                 |> set-text-color txtcolor
  %           in
  %           let line-str = arabic !line in
  %           let () = line <- !line + 1 in
  %           let content =
  %             inline-fil
  %               ++ read-inline ctx-line (embed-string line-str)
  %               ++ inline-skip (charwid *' 3.)
  %           in
  %           inline-frame-fixed (charwid *' 6.) pads Deco.empty content
  %         in
  %         ibacc ++ ib-line ++ ib
  %       )) inline-nil
  %     in
  %     line-break true true ctx ib-code
  %   ))

  let-block ctx +code ?:ruleopt code =
    scheme decoset-code ColorScheme.foreground ctx ruleopt code

end
