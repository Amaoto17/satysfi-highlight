@require: stdjabook
@import: highlight/code
@import: highlight/lang/ocaml


document (|
  title = {Syntax Highlightのサンプル};
  author = {amaoto};
  show-title = true;
  show-toc = false;
|) '<
  +section{OCamlでの例} <
    +code?:(OCaml.rule)(
```
module Option : sig
  type 'a t
  val return : 'a -> 'a t
  val bind : 'a t -> ('a -> 'b t) -> 'b t
  val map : ('a -> 'b) -> 'a t -> 'b t
  val show : ('a -> string) -> 'a t -> string
  (*
    val join : 'a t t -> 'a t
    val from : 'a -> 'a t -> 'a
  *)
end = struct
  type 'a t = None | Some of 'a

  let return x = Some x

  let bind m f =
    match m with
    | None -> None
    | Some x -> f x

  let (>>=) = bind

  let map f m = m >>= fun x -> return (f x)

  let show printer = function
    | None -> "None"
    | Some x -> Printf.sprintf "Some (%s)" @@ printer x
end
```
    );
  >
>
