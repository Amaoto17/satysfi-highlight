@require: stdjabook
@import: highlight
@import: lang/ocaml


document (|
  title = {Syntax Highlightのサンプル};
  author = {amaoto};
  show-title = true;
  show-toc = false;
|) '<
  +section{OCamlでの例} <
    +code?:(OCaml.rule)(
```
(* oneline comment *)

(*
  multi
  line
  comment
*)

(*
  (* nested comment *)
*)

[|1; 2; 3|]

let s0 = "abc"
let s1 = "abc\n"
let s2 = {|abc|}
let s3 = {id|abc|id}
let s4 = "\u{1Af}"

let module A = Array

let open Main.Bytecomp.Ast

let f0 = 123.45
let f1 = 123.
let f2 = 0.45e1_234
let f3 = 12.e-9

let c0 = 'a'
let c1 = '\x1b'
let c2 = '\012'
let c3 = '\n'

let rec is_even n =
  if n = 0 then true else odd @@ n - 1

and odd = function
  | 0 -> false
  | n -> even (n - 1)

#000
#000"abc\n"

let (>>) p p' =
  p >>= fun _ -> p'

module type S = sig
  type t
  val return : 'a -> t
    constraint 'a :: int
end

module Option : sig
  type 'a t = None | Some of 'a
  val return : 'a -> 'a t
end = struct
  type 'a t =
    | None
    | Some of 'a

  let return x = Some x
end

for i = 0 to 10 do
  for j = 0 to 10 do
  done
done

while true do
done

type t = string option

type t = int array list
```
    );
  >
>
