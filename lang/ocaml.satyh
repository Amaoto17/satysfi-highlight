@import: ../syntax

open Syntax


module OCaml : sig

  val rule : rule

end = struct

  let rule-array =
    let enter = pattern `\[\|` in
    let leave = pattern `\|\]` in
    fun self ->
      pattern-block (|
        enter = enter
      ; leave = leave
      ; style = Some (Array)
      ; inner = [self]
      |)

  let rule-comment =
    let enter = pattern `\(\*` in
    let leave = pattern `\*\)` in
    fix (fun self -> (
      pattern-block (|
        enter = enter
      ; leave = leave
      ; style = Some (Comment)
      ; inner = [self]
      |)
    ))

  let rule-float =
    pattern `-?\d[\d_]*\.([\d_]*)?([eE][+-]?\d[\d_]*)?`
      |> capture 0 (style NumericConstant)

  let rule-integer =
    pattern `-?\d[\d_]*`
      |> capture 0 (style NumericConstant)

  let rule-constant =
    patterns [
      pattern `\b(true|false)\b`
        |> capture 0 (style BooleanConstant)
    ; rule-float
    ; rule-integer
    ; pattern `'(.|\\(x\h{2}|o[0-3][0-7]{2}|\d{3}|[bnrt'"\\]))'`
        |> capture 0 (style CharacterConstant)
    ]

  let rule-typename =
    patterns [
      pattern `\b(int|char|float|string|list|array|bool|unit|exn|option|result|int32|int64|nativeint)\b`
        |> capture 0 (style TypeName)
    ]

  let rule = fix (fun self -> (
    patterns [
      rule-constant
    ; rule-typename
    ; rule-comment
    ; rule-array self
    ]
  ))

end
