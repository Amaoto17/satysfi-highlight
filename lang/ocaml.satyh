@import: ../lib/syntax

open Syntax


module OCaml : sig

  val rule : rule

end = struct

  let rule = fix (fun self -> (

    let rule-array = fix (fun rule-array -> (
      pattern-block (|
        enter = pattern `\[\|`
      ; leave = pattern `\|\]`
      ; style = Some (Array)
      ; inner = [rule-array; self]
      |)
    ))
    in

    let rule-comment = fix (fun rule-comment -> (
      pattern-block (|
        enter = pattern `\(\*`
      ; leave = pattern `\*\)`
      ; style = Some (Comment)
      ; inner = [rule-comment]
      |)
    ))
    in

    let rule-float =
      patterns [
        pattern `-?0[xX]\h[\h_]*\.([\h_]*)?([pP][+-]?\d[\d_]*)?`
      ; pattern `-?\d[\d_]*\.([\d_]*)?([eE][+-]?\d[\d_]*)?`
      ]
    in

    let rule-integer =
      patterns [
        pattern `-?0[xX]\h[\h_]*`
      ; pattern `-?0[oO][0-7][0-7_]*`
      ; pattern `-?0[bB][01][01_]*`
      ; pattern `-?\d[\d_]*`
      ]
    in

    let rule-constant =
      patterns [
        pattern `\b(true|false)\b`
          |> capture 0 (style BooleanConstant)
      ; rule-float
          |> capture 0 (style NumericConstant)
      ; rule-integer
          |> capture 0 (style NumericConstant)
      ; pattern `'(.|\\(x\h{2}|o[0-3][0-7]{2}|\d{3}|[bnrt'"\\]))'`
          |> capture 0 (style CharacterConstant)
      ]
    in

    let rule-string =
      patterns [
        pattern-block (|
          enter = pattern `"`
        ; leave = pattern `"`
        ; style = Some (String)
        ; inner = [
            pattern `\\(x\h{2}|o[0-3][0-7]{2}|\d{3}|\u\{\h+\}|[bnrt'"\\])`
              |> capture 0 (style CharacterConstant)
          ]
        |)
      ; pattern-block (|
          enter = pattern `\{[a-z_]*\|`
        ; leave = pattern `\|[a-z_]*\}`
        ; style = Some (String)
        ; inner = []
        |)
      ]
    in

    let rule-list = fix (fun rule-list -> (
      pattern-block (|
        enter = pattern `\[(?!\|)`
      ; leave = pattern `(?<!\|)\]`
      ; style = Some (List)
      ; inner = [rule-list; self]
      |)
    ))
    in

    let rule-typename =
      patterns [
        pattern `\b(int|char|float|string|list|array|bool|unit|exn|option|result|int32|int64|nativeint)\b`
          |> capture 0 (style TypeName)
      ]
    in

    let rule-typedef = fix (fun rule-typedef -> (
      patterns [
        rule-typename
      ; pattern `\bof\b`
          |> capture 0 (style Keyword)
      ; pattern `[a-z_']\w*\b`
          |> capture 0 (style TypeName)
      ; pattern-block (|
          enter = pattern `\[`
        ; leave = pattern `\]`
        ; style = None
        ; inner = [rule-typedef]
        |)
      ; pattern `\|`
      ; self
      ]
    ))
    in

    let rule-variables = fix (fun rule-variables -> (
      patterns [
        rule-constant
      ; pattern `(~)([a-z][\w']*)(\s*:\s*)?`
          |> capture 1 (style Keyword)
          |> capture 2 (style VariableName)
      ; pattern-block (|
          enter =
            pattern `(\?)(\([a-z][\w']*)\s*(=)`
              |> capture 1 (style Keyword)
              |> capture 4 (style Operator)
        ; leave = pattern `\)`
        ; style = None
        ; inner = [self]
        |)
      ; rule-typename
      ; pattern `\bas\b`
          |> capture 0 (style Keyword)
      ]
    ))
    in

    let rule-module-signature =
      pattern-block (|
        enter =
          pattern `\b(val|external)\s+\S+\s*:`
            |> capture 1 (style Keyword)
      ; leave =
          pattern `(?=#|\b(type|val|external|class|module|end)\b|^\s*$)`
      ; style = None
      ; inner = [
          pattern `(\??)([a-z][\w]*)\s*:`
            |> capture 1 (style Keyword)
        ; rule-typedef
        ]
      |)
    in

    let rule-module-binding =
      pattern `\b(let)\s+(module)\s+([A-Z][\w']*)\s*(=)`
        |> capture 1 (style Keyword)
        |> capture 2 (style Keyword)
        |> capture 3 (style ModuleName)
        |> capture 4 (style Operator)
    in

    let rule-module-open-binding =
      pattern `\b(let)\s+(open)\s+([A-Z][\w']*(\.[A-Z][\w']*)*)`
        |> capture 1 (style Keyword)
        |> capture 2 (style Keyword)
        |> capture 3 (style ModuleName)
    in

    let rule-let-function =
      pattern `\b(let(?:\s+rec)?|and)\s*([a-z_][\w']*\s+)(?:[a-z_][\w']*\s+)*(=)`
        |> capture 1 (style Keyword)
        |> capture 2 (style FunctionName)
        |> capture 3 (style Operator)
    in

    let rule-anonymous-fun =
      pattern-block (|
        enter =
          pattern `\bfun\s`
            |> capture 0 (style Keyword)
      ; leave = pattern `->`
      ; style = None
      ; inner = [rule-variables]
      |)
    in

    let rule-group =
      pattern-block (|
        enter =
          pattern `\b(struct|sig|begin)\b`
            |> capture 1 (style Keyword)
      ; leave =
          pattern `\bend\b`
            |> capture 0 (style Keyword)
      ; style = None
      ; inner = [self]
      |)
    in

    let rule-module =
      pattern `^[ \t]*(module)\s+([A-Z_][\w']*)(?:\s*(:)\s*([A-Z][\w']*)?)?`
        |> capture 1 (style Keyword)
        |> capture 2 (style ModuleName)
        |> capture 4 (style ModuleName)
    in

    let rule-module-type =
      pattern `^[ \t]*(module\s+type\s+)([A-Z][\w']*)`
        |> capture 1 (style Keyword)
        |> capture 2 (style ModuleName)
    in

    let rule-type-definition =
      pattern-block (|
        enter =
          pattern `\b(type|and)\s+([^=]*)(=?)`
            |> capture 1 (style Keyword)
            |> capture 2 (style TypeName)
            |> capture 3 (style Operator)
      ; leave =
          pattern `(?=\b(type|and|let|end|val|module|include|open|exception|class|external)\b)`
      ; style = None
      ; inner = [rule-typedef]
      |)
    in

    let rule-match-patterns =
      patterns [
        pattern `\b_\b`
          |> capture 0 (style Constant)
      ; self
      ]
    in

    let rule-pattern-match =
      pattern-block (|
        enter =
          pattern `\b(with|function)\b|(\|)(?=.*->)`
            |> capture 1 (style Keyword)
            |> capture 2 (style Operator)
      ; leave =
          pattern `->|\b(when)\b|\s*(?=\|)`
            |> capture 1 (style Keyword)
      ; style = None
      ; inner = [
          rule-comment
        ; rule-match-patterns
        ]
      |)
    in

    let rule-record =
      pattern-block (|
        enter = pattern `{`
      ; leave = pattern `}`
      ; style = None
      ; inner = [
          pattern-block (|
            enter =
              pattern `(mutable)\s+([a-z_][\w']*)\s*:`
                |> capture 1 (style Keyword)
          ; leave = pattern `;|(?=\})`
          ; style = None
          ; inner = [
              pattern `\bwith\b`
                |> capture 0 (style Keyword)
            ; rule-typedef
            ]
          |)
        ; self
        ]
      |)
    in

    let rule-module-open =
      pattern `\b(open)\s+([A-Z][\w']*)((?:\.[A-Z][\w']*)*)`
        |> capture 1 (style Keyword)
        |> capture 2 (style ModuleName)
        |> capture 3 (style ModuleName)
    in

    let rule-exception =
      pattern `\b(exception)\s+([A-Z][\w']*)(?:\s+(of))?\b`
        |> capture 1 (style Keyword)
        |> capture 2 (style ExceptionName)
        |> capture 3 (style Keyword)
    in

    let rule-operator =
      patterns [
        pattern `\b(mod|land|lor|lxor|lsl|lsr|asr|or)\b`
          |> capture 0 (style Operator)
      ; pattern `->`
      ; pattern `:=`
          |> capture 0 (style Operator)
      ; pattern `[-=<>@^|\&+*/$%][-!$%\&*+./:<=>?@^|~]*`
          |> capture 0 (style Operator)
      ; pattern `#[-!$%\&*+./:<=>?@^|~]+`
          |> capture 0 (style Operator)
      ; pattern `![-!$%\&*+./:<=>?@^|~]*`
          |> capture 0 (style Operator)
      ; pattern `[?~][-!$%\&*+./:<=>?@^|~]+`
          |> capture 0 (style Operator)
      ]
    in

    let rule-loop =
      pattern-block (|
        enter =
          pattern `\b(while|for)\b`
            |> capture 0 (style Keyword)
      ; leave =
          pattern `\b(done)\b`
            |> capture 0 (style Keyword)
      ; style = None
      ; inner = [
          pattern `\b(do)\b`
            |> capture 0 (style Keyword)
        ; self
        ]
      |)
    in

    let rule-module-ref =
      pattern `([A-Z][\w']*)\.`
        |> capture 1 (style ModuleName)
    in

    let rule-variant =
      pattern ``(`?|\b)[A-Z][\w']*\b``
        |> capture 0 (style Constant)
    in

    let rule-keywords =
      patterns [
        pattern `\b(downto|if|else|match|then|to|when|with|try)\b`
          |> capture 0 (style Keyword)
      ; pattern `\b(as|assert|class|constraint|exception|external|functor|in|include|inherit|initializer|lazy|let|module|mutable|new|object|open|private|rec|sig|struct|type|virtual)\b`
          |> capture 0 (style Keyword)
      ]
    in

    patterns [
      rule-constant
    ; rule-typename
    ; rule-module-binding
    ; rule-module-open-binding
    ; rule-let-function
    ; rule-anonymous-fun
    ; rule-group
    ; rule-module
    ; rule-module-type
    ; rule-type-definition
    ; rule-pattern-match
    ; rule-module-signature
    ; rule-module-open
    ; rule-exception
    ; rule-loop
    ; rule-module-ref
    ; rule-variant
    ; rule-keywords
    ; rule-string
    ; rule-record
    ; rule-comment
    ; rule-operator
    ; rule-array
    ; rule-list
    ]

  ))

end
