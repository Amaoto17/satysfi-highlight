let string-contains s c =
  let len = string-length s in
  let-rec iter k =
    if k >= len then false
    else
      let c1 = string-sub s k 1 in
      if string-same c c1 then true
      else iter (k + 1)
  in
  iter 0

let string-index s init-pos c =
  let-rec iter k =
    if k == string-length s then -1
    else
      let c1 = string-sub s k 1 in
      if string-same c1 c then k else iter (k + 1)
  in
  iter init-pos

let negate pred x = not (pred x)

let-rec for n f =
  if n == 0 then () else let () = f () in for (n - 1) f

let list-make n init =
  let-rec iter acc k =
    if k == n then acc
    else iter (init :: acc) (k + 1)
  in
  iter [] 0

let-rec list-rev-append xs ys =
  match xs with
  | [] -> ys
  | x :: rest -> list-rev-append rest (x :: ys)

let is-digit = string-contains `0123456789`
let is-oct-digit = string-contains `01234567`
let is-hex-digit = string-contains `0123456789abcdefABCDEF`
let is-upper = string-contains `ABCDEFGHIJKLMNOPQRSTUVWXYZ`
let is-lower = string-contains `abcdefghijklmnopqrstuvwxyz`
let is-letter c = is-upper c || is-lower c
let is-alpha-num c = is-letter c || is-digit c
let is-word-char c = is-alpha-num c || string-same c `_`
let is-space c = string-contains #` `# c
