@require: list


module UString = struct

  let is-empty = string-same ` `

  let concat sep xs =
    match xs with
    | [] -> ` `
    | x :: rest -> List.fold-left (fun acc x -> acc ^ sep ^ x) x rest

  let contains s c =
    let len = string-length s in
    let-rec iter k =
      if k >= len then false
      else
        let c1 = string-sub s k 1 in
        if string-same c c1 then true
        else iter (k + 1)
    in
    iter 0

  let index s init-pos c =
    let-rec iter k =
      if k == string-length s then k
      else
        let c1 = string-sub s k 1 in
        if string-same c c1 then k else iter (k + 1)
    in
    iter 0

  let-rec make len c =
    if len == 0 then ` ` else c ^ make (len - 1) c

end


module UFun = struct

  let negate pred x = not (pred x)

  let flip f x y = f y x

end


module UList = struct

  let cons x xs = x :: xs

  let-rec make n init =
    if n == 0 then [] else init :: make (n - 1) init

  let rev-concat lst =
    lst |> List.reverse |> List.concat

  let rev-append xs ys = List.fold-left (UFun.flip cons) ys xs

end


let is-digit     = string-match (regexp-of-string `[0-9]`)
let is-oct-digit = string-match (regexp-of-string `[0-7]`)
let is-hex-digit = string-match (regexp-of-string `[0-9a-fA-F]`)
let is-lower     = string-match (regexp-of-string `[a-z]`)
let is-upper     = string-match (regexp-of-string `[A-Z]`)
let is-letter    = string-match (regexp-of-string `[a-zA-Z]`)
let is-alpha-num = string-match (regexp-of-string `[0-9a-zA-Z]`)
let is-word-char = string-match (regexp-of-string `[0-9a-zA-Z_]`)

let newline-char = string-unexplode [10]
let return-char  = string-unexplode [13]
let tab-char     = string-unexplode [9]

let is-space = string-match (regexp-of-string (
  `[ `# ^ newline-char ^ return-char ^ tab-char ^ `]`))
