let string-contains s c =
  let len = string-length s in
  let-rec iter k =
    if k >= len then false
    else
      let c1 = string-sub s k 1 in
      if string-same c c1 then true
      else iter (k + 1)
  in
  iter 0

let string-index s init-pos c =
  let-rec iter k =
    if k == string-length s then k
    else
      let c1 = string-sub s k 1 in
      if string-same c1 c then k else iter (k + 1)
  in
  iter init-pos

let negate pred x = not (pred x)

let-rec for n f =
  if n == 0 then () else let () = f () in for (n - 1) f

let list-make n init =
  let-rec iter acc k =
    if k == n then acc
    else iter (init :: acc) (k + 1)
  in
  iter [] 0

let-rec list-rev-append xs ys =
  match xs with
  | [] -> ys
  | x :: rest -> list-rev-append rest (x :: ys)


let is-digit     = string-match (regexp-of-string `[0-9]`)
let is-oct-digit = string-match (regexp-of-string `[0-7]`)
let is-hex-digit = string-match (regexp-of-string `[0-9a-fA-F]`)
let is-lower     = string-match (regexp-of-string `[a-z]`)
let is-upper     = string-match (regexp-of-string `[A-Z]`)
let is-letter    = string-match (regexp-of-string `[a-zA-Z]`)
let is-alpha-num = string-match (regexp-of-string `[0-9a-zA-Z]`)
let is-word-char = string-match (regexp-of-string `[0-9a-zA-Z_]`)

let newline-char = string-unexplode [10]
let return-char  = string-unexplode [13]
let tab-char     = string-unexplode [9]

let is-space = string-match (regexp-of-string (
  `[ `# ^ newline-char ^ return-char ^ tab-char ^ `]`))
