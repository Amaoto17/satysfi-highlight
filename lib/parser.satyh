@require: list
@import: utils
@import: regex/types


type 'a 'b result =
  | Ok of 'a
  | Error of 'b


module Stream : sig

  type t

  val create : regex-vm option -> string -> t
  val position : t -> int
  val set-position : t -> int -> t
  val uncons : t -> int -> (string * t) option
  val source : t -> string
  val get-custom : t -> regex-vm option
  val set-custom : t -> regex-vm option -> t

end = struct

  type t = (|
    source : string;
    offset : int;
    custom : regex-vm option;
  |)

  
  let create custom source = (|
    source = source;
    offset = 0;
    custom = custom;
  |)

  let position t = t#offset

  let set-position t pos = (| t with offset = pos |)

  let source t = t#source

  let uncons t len =
    if t#offset + len > string-length t#source then None
    else
      let s = string-sub t#source t#offset len in
      let offset = t#offset + len in
      Some (s, (| t with offset = offset |))

  let get-custom t = t#custom

  let set-custom t custom = (| t with custom = custom |)

end


module Error : sig

  type message
  type t

  val empty : int -> t
  val unexpected : string -> int -> t
  val expected : string -> int -> t
  val problem : string -> int -> t
  val add-expected : t -> string -> int -> t
  val merge : t -> t -> t
  val position : t -> int
  val set-position : t -> int -> t
  val format : t -> string * string * string

end = struct

  type message =
    | Expected of string
    | Unexpected of string
    | Problem of string

  type t = (|
    err-pos  : int;
    messages : message list;
  |)

  let empty pos = (|
    err-pos  = pos;
    messages = [];
  |)

  let unexpected msg pos = (|
    err-pos  = pos;
    messages = [Unexpected msg];
  |)

  let expected msg pos = (|
    err-pos = pos;
    messages = [Expected msg];
  |)

  let problem msg pos = (|
    err-pos = pos;
    messages = [Problem msg];
  |)

  let add-expected err msg pos = (|
    err-pos  = pos;
    messages = Expected msg :: err#messages
  |)

  let merge err1 err2 = (|
    err-pos  = err2#err-pos;
    messages = List.append err1#messages err2#messages;
  |)

  let position err = err#err-pos

  let set-position err pos = (|
    err with err-pos = pos;
  |)

  let string-concat sep xs =
    match xs with
    | [] -> ` `
    | x :: rest -> List.fold-left (fun acc x -> acc ^ sep ^ x) x rest

  let format t =
    let-rec iter (unexp, exp, prob) messages =
      match messages with
      | [] ->
          let msg-unexp =
            match unexp with
            | [] -> ` `
            | msg :: _ -> #`unexpected `# ^ msg
          in
          let msg-exp =
            let expect = (string-concat #` or `# exp) in
            if string-same expect ` ` then ` `
            else #`expected `# ^ expect
          in
          let msg-prob =
            match prob with
            | [] -> ` `
            | msg :: _ -> msg
          in
          (msg-unexp, msg-exp, msg-prob)
      | message :: rest -> (
          match message with
          | Unexpected msg -> iter ([msg], exp, prob) rest
          | Expected msg -> iter (unexp, msg :: exp, prob) rest
          | Problem msg -> iter (unexp, exp, [msg]) rest
        )
    in
    iter ([], [], []) t#messages

end


type 'a parse-result =
  | ConsumedOk  of 'a * Stream.t * Error.t
  | ConsumedErr of Error.t
  | EmptyOk     of 'a * Stream.t * Error.t
  | EmptyErr    of Error.t

type 'a parser = Stream.t -> 'a parse-result


module Parser : sig

  val run : 'a parser -> Stream.t -> 'a parse-result
  val parse : 'a parser -> regex-vm option -> string -> 'a Error.t result
  val debug : string -> unit parser
  val return : 'a -> 'a parser
  val (>>=) : 'a parser -> ('a -> 'b parser) -> 'b parser
  val (>>) : 'a parser -> 'b parser -> 'b parser
  val (<<) : 'a parser -> 'b parser -> 'a parser
  val get : Stream.t parser
  val put : Stream.t -> unit parser
  val get-state : regex-vm parser
  val put-state : regex-vm -> unit parser
  val position : int parser
  val set-position : int -> unit parser
  val unexpected : string -> 'a parser
  val problem : string -> 'a parser
  val (<?>) : 'a parser -> string -> 'a parser
  val (<|>) : 'a parser -> 'a parser -> 'a parser
  val attempt : 'a parser -> 'a parser
  val satisfy : (string -> bool) -> string parser
  val string : string -> string parser
  val fix : ('a parser -> 'a parser) -> 'a parser
  val look-ahead : 'a parser -> 'a parser
  val not-followed-by : 'a parser -> unit parser
  val look-behind : int -> 'a parser -> 'a parser
  val not-preceded-by : int -> 'a parser -> unit parser
  val any : string parser
  val eof : unit parser
  val bof : unit parser
  val word-boundary : unit parser
  val non-word-boundary : unit parser
  val many : 'a parser -> ('a list) parser
  val many1 : 'a parser -> ('a list) parser
  val skip-many : 'a parser -> unit parser
  val skip-many1 : 'a parser -> unit parser
  val skip-count : int -> 'a parser -> unit parser
  val choice : ('a parser) list -> 'a parser
  val opt-with : 'a -> 'a parser -> 'a parser
  val chainl : 'a parser -> ('a -> 'a -> 'a) parser -> 'a parser
  val char : string -> string parser
  val one-of : string -> string parser
  val none-of : string -> string parser
  val digit-char : string parser
  val decimal : int parser
  val space : unit parser
  val space1 : unit parser

end = struct

  let run p st = p st

  let parse p custom-opt base =
    let st = Stream.create custom-opt base in
    match run p st with
    | ConsumedOk (x, _, _) -> Ok x
    | ConsumedErr err      -> Error err
    | EmptyOk (x, _, _)    -> Ok x
    | EmptyErr err         -> Error err

  let return x st = EmptyOk (x, st, Error.empty (Stream.position st))

  let bind p f st0 =
    match p st0 with
    | ConsumedOk (x1, st1, err1) -> (
        match (f x1) st1 with
        | ConsumedOk v -> ConsumedOk v
        | ConsumedErr err -> ConsumedErr err
        | EmptyOk (x2, st2, err2) -> ConsumedOk (x2, st2, Error.merge err1 err2)
        | EmptyErr err2 -> ConsumedErr (Error.merge err1 err2)
      )
    | ConsumedErr err -> ConsumedErr err
    | EmptyOk (x1, st1, err1) -> (
        match (f x1) st1 with
        | ConsumedOk v -> ConsumedOk v
        | ConsumedErr err -> ConsumedErr err
        | EmptyOk (x2, st2, err2) -> EmptyOk (x2, st2, Error.merge err1 err2)
        | EmptyErr err2 -> EmptyErr (Error.merge err1 err2)
      )
    | EmptyErr err -> EmptyErr err

  let (>>=) = bind

  let (>>) p1 p2 = p1 >>= (fun _ -> p2)

  let (<<) p1 p2 = p1 >>= (fun x -> (p2 >> return x))

  let get st = EmptyOk (st, st, Error.empty (Stream.position st))

  let put st _ = EmptyOk ((), st, Error.empty (Stream.position st))

  let expected msg st = EmptyErr (Error.expected msg (Stream.position st))

  let unexpected msg st = EmptyErr (Error.unexpected msg (Stream.position st))

  let problem msg st = EmptyErr (Error.problem msg (Stream.position st))

  let get-state =
    get >>= (fun st -> (
      match Stream.get-custom st with
      | None -> problem `parser doesn't have a custom state`
      | Some custom -> return custom
    ))

  let put-state custom =
    get >>= (fun st -> (put (Stream.set-custom st (Some custom))))

  let position =
    get >>= (fun st -> return (Stream.position st))

  let set-position pos =
    get >>= (fun st -> (put (Stream.set-position st pos)))

  let empty st = EmptyErr (Error.empty (Stream.position st))

  let (<?>) p msg st =
    match p st with
    | ConsumedOk v -> ConsumedOk v
    | ConsumedErr err -> ConsumedErr (Error.add-expected err msg (Stream.position st))
    | EmptyOk v -> EmptyOk v
    | EmptyErr err -> EmptyErr (Error.add-expected err msg (Stream.position st))

  let (<|>) p1 p2 st =
    match p1 st with
    | ConsumedOk v -> ConsumedOk v
    | ConsumedErr err -> ConsumedErr err
    | EmptyOk v -> EmptyOk v
    | EmptyErr err -> (
        match p2 st with
        | ConsumedOk v -> ConsumedOk v
        | ConsumedErr err -> ConsumedErr err
        | EmptyOk (x1, st1, err1) -> EmptyOk (x1, st1, Error.merge err err1)
        | EmptyErr err1 -> EmptyErr (Error.merge err err1)
      )

  let map f p st =
    match p st with
    | ConsumedOk (x, st1, err) -> ConsumedOk (f x, st1, err)
    | ConsumedErr err -> ConsumedErr err
    | EmptyOk (x, st1, err) -> EmptyOk (f x, st1, err)
    | EmptyErr err -> EmptyErr err

  let attempt p st =
    match p st with
    | ConsumedOk v -> ConsumedOk v
    | ConsumedErr err -> EmptyErr (Error.set-position err (Stream.position st))
    | EmptyOk v -> EmptyOk v
    | EmptyErr err -> EmptyErr err

  let satisfy pred st =
    match Stream.uncons st 1 with
    | None -> EmptyErr (Error.unexpected `end of input` (Stream.position st))
    | Some (c, st1) ->
        if pred c then ConsumedOk (c, st1, Error.empty (Stream.position st))
        else EmptyErr (Error.unexpected (`'` ^ c ^ `'`) (Stream.position st))

  let string s st =
    match Stream.uncons st (string-length s) with
    | None -> EmptyErr (Error.unexpected `end of input` (Stream.position st))
    | Some (s1, st1) ->
        if string-same s1 s then ConsumedOk (s1, st1, Error.empty (Stream.position st))
        else EmptyErr (Error.expected (`"` ^ s ^ `"`) (Stream.position st))

  let debug msg st =
    let () = display-message msg in
    EmptyOk ((), st, Error.empty (Stream.position st))

  let fix f =
    let-rec p = fun st -> (f r)
    and r = fun st -> (p st) st in r

  let many p = fix (fun self -> (
    (p >>= (fun x -> (self >>= (fun xs -> return (x :: xs))))) <|> return []
  ))

  let many1 p =
    p >>= (fun x -> (many p >>= (fun xs -> return (x :: xs))))

  let skip-many p = fix (fun self -> (
    (p >> self) <|> return ()
  ))

  let skip-many1 p =
    p >> skip-many p

  let-rec skip-count n p =
    if n < 0 then problem `count must not be negative number`
    else if n == 0 then return () else p >> skip-count (n - 1) p

  let look-ahead p =
    get >>= (fun st -> (
      p >>= (fun x -> (
        put st >> return x
      ))
    ))

  let not-followed-by p =
    attempt (
      ( attempt p >>
        unexpected `following`
      ) <|> return ()
    )

  let look-behind len p =
    get >>= (fun st -> (
      let pos = Stream.position st in
      if pos < len then unexpected `beginning of input`
      else
        set-position (pos - len) >>
        p >>= (fun x -> (
          put st >> return x
        ))
    ))

  let not-preceded-by len p =
    get >>= (fun st -> (
      let pos = Stream.position st in
      if pos < len then unexpected `beginning of input`
      else
        set-position (pos - len) >>
        attempt (
          ( attempt p >>
            unexpected `preceding`
          ) <|> put st >> return ()
        )
    ))

  let any = satisfy (fun _ -> true)

  let eof = not-followed-by any <?> `end of input`

  let bof =
    position >>= (fun pos -> (
      if pos == 0 then return ()
      else expected `beginning of input`
    ))

  let word-boundary =
    get >>= (fun st -> (
      let src = Stream.source st in
      let curpos = Stream.position st in
      let prev-is-word =
        if curpos == 0 then false
        else
          let c = string-sub src (curpos - 1) 1 in
          is-word-char c
      in
      let next-is-word =
        if curpos == string-length src then false
        else
          let c = string-sub src curpos 1 in
          is-word-char c
      in
      let xor l1 l2 = l1 && (not l2) || (not l1) && l2 in
      if xor prev-is-word next-is-word then return ()
      else expected `word boundary`
    ))

  let non-word-boundary =
    not-followed-by word-boundary <?> `non-word boundary`

  % let-rec many p = many1 p <|> return []

  % and many1 p = p >>= (fun x -> (many p >>= (fun xs -> return (x :: xs))))

  let choice ps = List.fold-left (<|>) empty ps

  let opt-with default p = p <|> return default

  let chainl p op =
    let-rec iter acc =
      let aux = op >>= (fun f -> (p >>= (fun x -> iter (f acc x)))) in
      aux <|> return acc
    in
    p >>= iter

  let char c = satisfy (string-same c) <?> (`'` ^ c ^ `'`)

  let one-of cs = satisfy (string-contains cs)

  let none-of cs = satisfy (negate (string-contains cs))

  let digits p base =
    let digit = p |> map (string-index `0123456789` 0) in
    let f acc x = acc * base + x in
    many1 digit |> map (List.fold-left f 0)

  let digit-char = satisfy is-digit <?> `digit`
  
  let decimal = digits digit-char 10 <?> `decimal`

  let space-char = satisfy is-space <?> `whitespace`

  let space = skip-many space-char

  let space1 = skip-many1 space-char

end
