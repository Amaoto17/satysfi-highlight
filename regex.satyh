@require: option
@import: vector
@import: parser
@import: utils

open Parser


type quantity =
  | Greedy
  | Reluctant
  | Possessive

type anchor =
  | BeginningOfLine
  | EndOfLine
  | WordBoundary
  | NonWordBoundary

type repeat =
  | Just of int
  | AtLeast of int
  | AtMost of int
  | Between of int * int


type node =
  | Char of string
  | Any
  | Concat of node list
  | Alt of node * node
  | Opt of quantity * node
  | Many of quantity * node
  | Many1 of quantity * node
  | Group of node
  | Satisfy of string -> bool
  | LookAhead of node
  | NegLookAhead of node
  | Anchor of anchor
  | BackRef of int
  | Repeat of repeat * quantity * node


type inst =
  | OpEmpty
  | OpChar of string
  | OpMatch
  | OpAny
  | OpSplit of int * int
  | OpJump of int
  | OpAtomicExec of int * int
  | OpStop
  | OpSaveStart
  | OpSaveEnd of int
  | OpSatisfy of string -> bool
  | OpAttempt of int * int
  | OpAttemptFail of int * int
  | OpAnchor of anchor
  | OpBackRef of int


type match-data = (int * int * string) option % begin, end, matched string

type exec-ctx = (|
  inst-seq : inst Vec.vec;
  pc : int;
  pos-stack : int list;
  matched : match-data list;
|)

let exec-ctx-init = (|
  inst-seq = Vec.empty;
  pc = 0;
  pos-stack = [];
  matched = [];
|)


let control-char =
  choice [
    char `n` >> return (string-unexplode [12])
  ; char `t` >> return (string-unexplode [11])
  ; char `r` >> return (string-unexplode [15])
  ]

let shorthand =
  choice [
    char `w` >> return is-word-char
  ; char `W` >> return (negate is-word-char)
  ; char `d` >> return is-digit
  ; char `D` >> return (negate is-digit)
  ; char `s` >> return is-space
  ; char `S` >> return (negate is-space)
  ; char `h` >> return is-hex-digit
  ; char `H` >> return (negate is-hex-digit)
  ]


module CharClass : sig

  val parse : (string -> bool) unit parser

end = struct

  let lower = `abcdefghijklmnopqrstuvwxyz`
  let upper = `ABCDEFGHIJKLMNOPQRSTUVWXYZ`
  let number = `0123456789`

  let option-is-some opt =
    match opt with
    | Some _ -> true
    | None   -> false

  let string-between c1 c2 =
    let aux group =
      let pos1 = string-index group 0 c1 in
      if pos1 == -1 then None
      else
        let pos2 = string-index group pos1 c2 in
        if pos2 == -1 then None
        else Some (string-sub group pos1 (pos2 - pos1 + 1))
    in
    let str-opt = aux lower in
    if option-is-some str-opt then str-opt
    else let str-opt = aux upper in
    if option-is-some str-opt then str-opt
    else aux number


  type class-node =
    | Class of class-node
    | Single of string
    | Range of string * string
    | Shorthand of string -> bool
    | Union of class-node * class-node
    | Prod of class-node * class-node
    | Not of class-node

  
  let build ast =
    let-rec iter node =
      match node with
      | Single c -> string-same c
      | Range (c1, c2) -> (
          match string-between c1 c2 with
          | None -> fun _ -> false
          | Some str -> string-contains str
        )
      | Class t -> iter t
      | Shorthand pred -> pred
      | Not t -> negate (iter t)
      | Prod (t1, t2) -> fun x -> iter t1 x && iter t2 x
      | Union (t1, t2) -> fun x -> iter t1 x || iter t2 x
    in
    return (iter ast)


  let class-meta-char = `[]&-\`

  let item = none-of class-meta-char

  let-rec escaped = fun st -> st |> run (
    char `\` >>
    choice [
      control-char >>= (fun c -> (
        return (Single c)
      ))
    ; shorthand >>= (fun pred -> (
        return (Shorthand pred)
      ))
    ; any >>= (fun c -> (
        return (Single c)
      ))
    ]
  )

  and range c1 =
    char `-` >>
    item >>= (fun c2 -> (
      return (Range (c1, c2))
    ))

  and primary = fun st -> st |> run (
    choice [
      char `[` >>
      class >>= (fun t -> (
        return (Class t)
      ))
    ; escaped
    ; item >>= (fun c -> (
        (range c) <|> return (Single c)
      ))
    ]
  )

  and enum = fun st -> st |> run (
    let enum-op =
      return (fun t1 t2 -> Union (t1, t2))
    in
    chainl primary enum-op
  )

  and prod = fun st -> st |> run (
    let prod-op =
      string `&&` >>
      return (fun t1 t2 -> Prod (t1, t2))
    in
    chainl enum prod-op
  )

  and compl = fun st -> st |> run (
    opt-with (fun t -> t) (
      char `^` >> return (fun t -> Not t)
    ) >>= (fun f -> (
      prod >>= (fun t -> (
        return (f t)
      ))
    ))
  )

  and class = fun st -> st |> run (
    compl << char `]`
  )

  and parse = fun st -> st |> run (
    char `[` >>
    class >>= build
  )

end


module Syntax : sig

  val re : node unit parser

end = struct

  let re-meta-char = `|?*+()[]^$.\`

  let item = none-of re-meta-char

  let char-class =
    CharClass.parse >>= (fun pred -> (
      return (Satisfy pred)
    ))

  let backslash-anchor =
    choice [
      char `b` >> return WordBoundary
    ; char `B` >> return NonWordBoundary
    ]

  let backslash =
    char `\` >>
    choice [
      control-char >>= (fun c -> (
        return (Char c)
      ))
    ; shorthand >>= (fun pred -> (
        return (Satisfy pred)
      ))
    ; backslash-anchor >>= (fun kind -> (
        return (Anchor kind)
      ))
    ; decimal >>= (fun n -> (
        return (BackRef n)
      ))
    ; any >>= (fun c -> (
        return (Char c)
      ))
    ]

  let single-meta =
    choice [
      char `.` >> return Any
    ; char `^` >> return (Anchor (BeginningOfLine))
    ; char `$` >> return (Anchor (EndOfLine))
    ]

  let-rec paren = fun st -> st |> run (
    char `(` >>
    choice [
      char `?` >>
        choice [
          char `=` >>
          alt >>= (fun t -> (
            return (LookAhead t)
          ))
        ; char `!` >>
          alt >>= (fun t -> (
            return (NegLookAhead t)
          ))
        ; char `:` >> alt
        ]
    ; alt >>= (fun t -> (
        return (Group t)
      ))
    ] << char `)`
  )

  and primary = fun st -> st |> run (
    choice [
      paren
    ; char-class
    ; backslash
    ; single-meta
    ; item >>= (fun c ->
        return (Char c)
      )
    ]
  )

  and rep-times t =
    char `{` >>
    choice [
      char `,` >>
      decimal >>= (fun n -> (
        return (AtMost n)
      ))
    ; decimal >>= (fun m -> (
        choice [
          char `,` >>
          choice [
            decimal >>= (fun n -> (
              return (Between (m, n))
            ))
          ; return (AtLeast m)
          ]
        ; return (Just m)
        ]
      ))
    ] << char `}`

  and quantifier builder =
    choice [
      char `?` >> return (builder Reluctant)
    ; char `+` >> return (builder Possessive)
    ; return (builder Greedy)
    ]

  and rep = fun st -> st |> run (
    primary >>= (fun t ->(
      choice [
        char `?` >> quantifier (fun q -> Opt (q, t))
      ; char `*` >> quantifier (fun q -> Many (q, t))
      ; char `+` >> quantifier (fun q -> Many1 (q, t))
      ; rep-times t >>= (fun kind -> (
          quantifier (fun q -> Repeat (kind, q, t))
        ))
      ; return t
      ]
    ))
  )

  and seq = fun st -> st |> run (
    many rep >>= (fun ts -> (
      return (Concat ts)
    ))
  )

  and alt = fun st -> st |> run (
    let alt-op =
      char `|` >> return (fun t1 t2 -> Alt (t1, t2))
    in
    chainl seq alt-op
  )

  and re = fun st -> st |> run (
    alt << eof
  )

end


module Exec : sig

  val run : inst Vec.vec -> int -> (match-data list) exec-ctx parser

end = struct

  let increment-pc =
    get-state >>= (fun ctx -> (
      put-state (| ctx with pc = ctx#pc + 1 |)
    ))

  let set-pc pc =
    get-state >>= (fun ctx -> (
      put-state (| ctx with pc = pc |)
    ))

  let ensure len =
    get >>= (fun st -> (
      let srclen = string-length st#src in
      if st#offset + len <= srclen then return ()
      else fail
    ))

  let match1 c =
    char c >> return ()

  let any1 =
    any >> return ()

  let match1p pred =
    satisfy pred >> return ()

  let get-nth-match n =
    get-state >>= (fun ctx -> (
      let len = List.length ctx#matched in
      % let submatch = Option.from None (List.nth (len - 1 - n) ctx#matched) in
      let submatch = Option.from None (List.nth n ctx#matched) in
      return submatch
    ))

  let get-all-match =
    get-state >>= (fun ctx -> (
      % let matched = List.map (Option.from (0, 0, ` `)) ctx#matched in
      % return (List.reverse matched)
      return ctx#matched
    ))

  let list-nth-set n elem lst =
    let-rec iter k lst =
      match lst with
      | [] -> []
      | x :: xs ->
          if k == n then elem :: xs
          else x :: iter (k + 1) xs
    in
    iter 0 lst

  let set-match n bpos epos s =
    get-state >>= (fun ctx -> (
      % let len = List.length ctx#matched in
      % let matched = list-nth-set (len - 1 - n) (Some (bpos, epos, s)) ctx#matched in
      let matched = list-nth-set n (Some (bpos, epos, s)) ctx#matched in
      put-state (| ctx with matched = matched |)
    ))

  let push-current-pos =
    current-pos >>= (fun pos -> (
      get-state >>= (fun ctx -> (
        let pos-stack = pos :: ctx#pos-stack in
        put-state (| ctx with pos-stack = pos-stack |)
      ))
    ))

  let pop-pos =
    get-state >>= (fun ctx -> (
      match ctx#pos-stack with
      | [] -> fail
      | pos :: rest ->
          put-state (| ctx with pos-stack = rest |) >>
          return pos
    ))

  let capture n =
    get >>= (fun st -> (
      pop-pos >>= (fun pos -> (
        let curpos = st#offset in
        let sub = string-sub st#src pos (curpos - pos) in
        set-match n pos curpos sub
      ))
    ))

  let anchor kind =
    match kind with
    | BeginningOfLine -> bof
    | EndOfLine -> eof
    | WordBoundary -> word-boundary
    | NonWordBoundary -> non-word-boundary

  let back-ref n =
    get-nth-match n >>= (fun submatch-opt -> (
      match submatch-opt with
      | None -> fail
      | Some (_, _, s) -> string s >> return ()
    ))

  let fetch =
    get-state >>= (fun ctx -> (
      match Vec.get ctx#inst-seq ctx#pc with
      | None -> fail
      | Some inst -> return inst
    ))

  let-rec next = fun st -> st |> run (
    increment-pc >> exec
  )

  and jump pc = fun st -> st |> run (
    set-pc pc >> exec
  )

  and split pc1 pc2 = fun st -> (
    match st |> jump pc1 with
    | Some x -> Some x
    | None -> st |> jump pc2
  )

  and attempt pc1 pc2 = fun st -> (
    match st |> jump pc1 with
    | Some _ -> st |> jump pc2
    | None -> None
  )

  and attempt-fail pc1 pc2 = fun st -> (
    match st |> jump pc1 with
    | None -> st |> jump pc2
    | Some _ -> None
  )

  and exec = fun st -> st |> run (
    fetch >>= (fun inst -> (
      match inst with
      | OpEmpty ->
          next
      | OpChar c ->
          ensure 1 >>
          match1 c >>
          next
      | OpAny ->
          ensure 1 >>
          any1 >>
          next
      | OpMatch ->
          capture 0 >>
          get-all-match
      | OpSplit (pc1, pc2) ->
          split pc1 pc2
      | OpJump pc ->
          jump pc
      | OpAtomicExec (pc1, pc2) ->
          jump pc1 >>
          jump pc2
      | OpStop ->
          return []
      | OpSaveStart ->
          push-current-pos >>
          next
      | OpSaveEnd n ->
          capture n >>
          next
      | OpSatisfy pred ->
          ensure 1 >>
          match1p pred >>
          next
      | OpAttempt (pc1, pc2) ->
          attempt pc1 pc2
      | OpAttemptFail (pc1, pc2) ->
          attempt-fail pc1 pc2
      | OpAnchor kind ->
          anchor kind >>
          next
      | OpBackRef n ->
          back-ref n >>
          next
    ))
  )

  let run inst-seq n-save =
    let ctx = (|
      exec-ctx-init with
        inst-seq = inst-seq;
        matched = list-make (n-save + 1) None;
    |) in
    put-state ctx >>
    push-current-pos >>
    exec

end


module Regex : sig

  val compile : string -> (match-data list) exec-ctx parser

end = struct

  let build ast =
    let-mutable inst-seq <- Vec.empty in
    let emit inst = inst-seq <- Vec.push !inst-seq inst in
    let curpos () = Vec.size !inst-seq in
    let reserve () =
      let i = curpos () in
      let () = emit OpEmpty in
      fun inst -> (inst-seq <- Vec.set !inst-seq i inst)
    in
    let-mutable n-save <- 0 in
    let-rec iter node =
      match node with
      | Char c ->
          emit (OpChar c)
      | Any ->
          emit OpAny
      | Concat node-list ->
          List.iter iter node-list
      | Alt (t1, t2) ->
          let set-split = reserve () in
          let t1-begin = curpos () in
          let () = iter t1 in
          let set-jump = reserve () in
          let t2-begin = curpos () in
          let () = iter t2 in
          let () = set-split (OpSplit (t1-begin, t2-begin)) in
          set-jump (OpJump (curpos ()))
      | Opt (quantity, t) ->
          let emitter () =
            let set-split = reserve () in
            let t-begin = curpos () in
            let () = iter t in
            (set-split, t-begin)
          in
          emit-quantify emitter quantity
      | Many (quantity, t) ->
          let emitter () =
            let loop-begin = curpos () in
            let set-split = reserve () in
            let t-begin = curpos () in
            let () = iter t in
            let () = emit (OpJump loop-begin) in
            (set-split, t-begin)
          in
          emit-quantify emitter quantity
      | Many1 (quantity, t) ->
          let emitter () =
            let t-begin = curpos () in
            let () = iter t in
            let set-split = reserve () in
            (set-split, t-begin)
          in
          emit-quantify emitter quantity
      | Group t ->
          let () = n-save <- !n-save + 1 in
          let n = !n-save in
          let () = emit OpSaveStart in
          let () = iter t in
          emit (OpSaveEnd n)
      | Satisfy pred ->
          emit (OpSatisfy pred)
      | LookAhead t ->
          let set-attempt = reserve () in
          let t-begin = curpos () in
          let () = iter t in
          let () = emit OpStop in
          set-attempt (OpAttempt (t-begin, curpos ()))
      | NegLookAhead t ->
          let set-attempt-fail = reserve () in
          let t-begin = curpos () in
          let () = iter t in
          let () = emit OpStop in
          set-attempt-fail (OpAttemptFail (t-begin, curpos ()))
      | Anchor kind ->
          emit (OpAnchor kind)
      | BackRef n ->
          emit (OpBackRef n)
      | Repeat (kind, quantity, t) -> (
          match kind with
          | Just n ->
              for n (fun _ -> iter t)
          | AtLeast n ->
              let () = for n (fun _ -> iter t) in
              iter (Many (quantity, t))
          | AtMost n ->
              for n (fun _ -> iter (Opt (quantity, t)))
          | Between (m, n) ->
              let () = for m (fun _ -> iter t) in
              for (n - m) (fun _ -> iter (Opt (quantity, t)))
        )
    and emit-quantify emitter quantity =
      match quantity with
      | Greedy ->
          let (set-split, t-begin) = emitter () in
          set-split (OpSplit (t-begin, curpos ()))
      | Reluctant ->
          let (set-split, t-begin) = emitter () in
          set-split (OpSplit (curpos (), t-begin))
      | Possessive ->
          let set-atomic-exec = reserve () in
          let loop-begin = curpos () in
          let (set-split, t-begin) = emitter () in
          let () = set-split (OpSplit (t-begin, curpos ())) in
          let () = emit OpStop in
          set-atomic-exec (OpAtomicExec (loop-begin, curpos ()))
    in
    let () = iter ast in
    let () = emit OpMatch in
    Exec.run !inst-seq !n-save

  let compile pat =
    match easy-parse Syntax.re pat with
    | Some ast -> build ast
    | None -> fail

end
